/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package eu.gamecam.calendar.export.frames;

import eu.gamecam.calendar.export.CalendarItem;
import eu.gamecam.calendar.export.google.GoogleCalendar;
import eu.gamecam.calendar.export.web.ConnectionManager;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Erik Juríček
 */
public class ExportFrame extends javax.swing.JFrame {

    private List<CalendarItem> calendarsJobs = new ArrayList<>();
    private ConnectionManager connectionManager;
    private GoogleCalendar googleCalendar;

    /**
     * Creates new form BaseWindow
     */
    public ExportFrame() {
        initComponents();
        statusText.setText("Waiting for HTML");

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        htmlText = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        static_text = new javax.swing.JLabel();
        statusText = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        items_count = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        htmlText.setColumns(20);
        htmlText.setRows(5);
        htmlText.setEnabled(false);
        jScrollPane1.setViewportView(htmlText);

        jLabel1.setText("Loaded HTML from Page");

        jButton1.setText("Process HTML");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        static_text.setText("Status:");

        statusText.setText("HTML not processed");

        jLabel2.setText("Confirm items found:");

        items_count.setText("0");

        jButton2.setText("Create Events");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete Events");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(static_text, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusText)
                            .addComponent(items_count))
                        .addGap(33, 33, 33))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(static_text)
                    .addComponent(statusText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(items_count)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jButton3)))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        statusText.setText("Processing HTML");
        calendarsJobs.clear();

        try {
            String html = htmlText.getText();

            String[] htmlArray = html.split("</tbody>");

            List<CalendarItem> calendars = new ArrayList<>();

            for (int i = 0; i < htmlArray.length - 1; i++) {
                CalendarItem ci = new CalendarItem();
                if (i == 0) {
                    String string = htmlArray[i];
                    String[] smallArray = string.split("</thead>");
                    if (smallArray.length > 0) {
                        smallArray[1] = smallArray[1] + "\n </tbody>";
                        ci.setHtmlString(smallArray[1]);
                        ci.setDate(getDateFromHtml(ci.getHtmlString()));
                        calendars.add(ci);
                    } else {
                        //idk
                    }
                } else {
                    String string = htmlArray[i];
                    string = string + "\n </tbody>";
                    ci.setHtmlString(string);
                    ci.setDate(getDateFromHtml(ci.getHtmlString()));
                    calendars.add(ci);
                }
            }

            for (CalendarItem calendar : calendars) {
                if (calendar.getHtmlString().contains("green")) {
                    calendarsJobs.add(calendar);
                }
            }

            for (CalendarItem calendarsJob : calendarsJobs) {
                calendarsJob.calcEventInfo();
            }

            statusText.setText("Process Finish");
            items_count.setText(String.valueOf(calendarsJobs.size()));

            jButton1.setEnabled(false);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
        } catch (Exception e) {
            System.out.println("chyba");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            for (CalendarItem calendarsJob : calendarsJobs) {
                googleCalendar.addToCalendar(calendarsJob);
            }
            jButton2.setEnabled(false);
            statusText.setText("Events created");
        } catch (Exception e) {
            System.out.println("error");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            googleCalendar.deleteAllInCalendar();
            statusText.setText("Events deleted");
        } catch (Exception e) {
            System.out.println("error");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public String getDateFromHtml(String string) {
        String date = "";
        try {
            Pattern p = Pattern.compile("<strong>([^<]*)</strong>", Pattern.MULTILINE | Pattern.DOTALL);
            Matcher m = p.matcher(string);
            m.find();

            return m.group(1);
        } catch (Exception e) {
            System.out.println("cant export ");
        }

        return date;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExportFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea htmlText;
    private javax.swing.JLabel items_count;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel static_text;
    private javax.swing.JLabel statusText;
    // End of variables declaration//GEN-END:variables

    public ConnectionManager getConnectionManager() {
        return connectionManager;
    }

    public void setConnectionManager(ConnectionManager connectionManager) {
        this.connectionManager = connectionManager;

        this.htmlText.setText(connectionManager.getDownloadedHtml());
    }

    public GoogleCalendar getGoogleCalendar() {
        return googleCalendar;
    }

    public void setGoogleCalendar(GoogleCalendar googleCalendar) {
        this.googleCalendar = googleCalendar;
    }
}
